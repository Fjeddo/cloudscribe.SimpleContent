@model cloudscribe.SimpleContent.Web.ViewModels.PageViewModel
@using cloudscribe.SimpleContent.Models
@using cloudscribe.SimpleContent.Web
@using cloudscribe.SimpleContent.Web.Design
@using cloudscribe.Web.Navigation;
@using Microsoft.Extensions.Options
@using System.Globalization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SimpleContent> sr
@inject IOptions<IconCssClasses> iconClassesAccessor
@{
    var icons = iconClassesAccessor.Value;
}
@functions{

    public string GetFooterClass()
    {
       
        return "bh";
    }
    public string GetEditTitle()
    {
        if (Model.CurrentPage != null) return Model.CurrentPage.Title;
        return "";
    }

}
<article class="page" data-id="@Model.CurrentPage.Id"
         data-approve-comment-url="@Url.Action("AjaxApproveComment", "Page")"
         data-delete-comment-url="@Url.Action("AjaxDeleteComment", "Page")"
         itemscope itemtype="http://schema.org/Article">
    @if (Model.CurrentPage.ShowHeading)
    {
        <header class="">
           <h1 id="article-title" itemprop="headline name">@Model.CurrentPage.Title</h1>
            @{await Html.RenderPartialAsync("PageTopPartial", Model); }
        </header>
    }
    <div itemprop="articleBody">@Html.Raw(Model.FilterHtml(Model.CurrentPage))</div>
    @{await Html.RenderPartialAsync("PageBottomPartial", Model); }
    @if (!Model.CurrentPage.ShowHeading)
    {
        <schema-org-meta itemprop="headline" content="@Model.CurrentPage.Title"></schema-org-meta> 
    }
    @{
        var imageUrl = Model.ExtractFirstImageUrl(Model.CurrentPage, Url);
        var imageSize = Model.ExtractFirstImageDimensions(Model.CurrentPage);
    }
    @if (!string.IsNullOrEmpty(imageUrl))
    {
        <div class="collapse" aria-hidden="true" itemprop="image" itemscope itemtype="http://schema.org/ImageObject">
            <schema-org-meta itemprop="url" content="@imageUrl"></schema-org-meta>
            <schema-org-meta itemprop="width" content="@imageSize.Width"></schema-org-meta>
            <schema-org-meta itemprop="height" content="@imageSize.Height"></schema-org-meta>
        </div>
    }
    @if (!string.IsNullOrEmpty(Model.CurrentPage.Author))
    {
        <div class="collapse" aria-hidden="true" itemprop="author" itemscope itemtype="http://schema.org/Person">
            <schema-org-meta itemprop="name" content="@Model.CurrentPage.Author"></schema-org-meta>
        </div>
    }
    @if (!string.IsNullOrEmpty(Model.ProjectSettings.Publisher))
    {
        <div class="collapse" aria-hidden="true" itemprop="publisher" itemscope itemtype="http://schema.org/@Model.ProjectSettings.PublisherEntityType">
            <schema-org-meta itemprop="name" content="@Model.ProjectSettings.Publisher"></schema-org-meta>
            <div class="collapse" aria-hidden="true" itemprop="logo" itemscope itemtype="http://schema.org/ImageObject">
                <schema-org-meta itemprop="url" content="@Model.ProjectSettings.PublisherLogoUrl"></schema-org-meta>
                <schema-org-meta itemprop="width" content="@Model.ProjectSettings.PublisherLogoWidth"></schema-org-meta>
                <schema-org-meta itemprop="height" content="@Model.ProjectSettings.PublisherLogoHeight"></schema-org-meta>
            </div>
        </div>
    }
    <schema-org-meta itemprop="datePublished" content="@Model.CurrentPage.PubDate.ToString("s", CultureInfo.InvariantCulture)"></schema-org-meta>
    <schema-org-meta itemprop="dateModified" content="@Model.CurrentPage.LastModified.ToString("s", CultureInfo.InvariantCulture)"></schema-org-meta>
    @if (Model.CurrentPage != null && Model.CurrentPage.ShowMenu)
    {
        @await Component.InvokeAsync("Navigation", new { viewName = "ChildTree", filterName = NamedNavigationFilters.ChildTree, startingNodeKey = "" })
    }
    @if ((Model.CurrentPage.ShowComments) && (!string.IsNullOrEmpty(Model.ProjectSettings.DisqusShortName)))
    {
        await Html.RenderPartialAsync("DisqusCommentsPartial", Model);
    }
</article>
